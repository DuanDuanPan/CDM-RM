name: Quality Gates
on:
  pull_request:
    branches: [main, next, develop]
  push:
    branches: [main, next, develop]

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Mark contracts job start
        run: echo "CONTRACTS_JOB_START=$(date +%s)" >> "$GITHUB_ENV"
      - name: Setup Node & Corepack
        id: setup_node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - run: corepack enable
      - run: yarn --version
      - name: Install dependencies (immutable)
        run: |
          mkdir -p reports
          START=$(date +%s)
          yarn install --immutable
          END=$(date +%s)
          DURATION=$((END-START))
          echo "yarn_install_seconds=$DURATION" | tee reports/yarn-install-metrics.txt
      - run: git diff --exit-code yarn.lock
      - name: Record Yarn cache metadata
        run: |
          mkdir -p reports
          echo "cache-hit=${{ steps.setup_node.outputs.cache-hit }}" | tee reports/yarn-cache.txt
      - name: Verify Yarn config guards
        run: |
          yarn config get nodeLinker | tee reports/nodeLinker.txt
          if ! grep -q 'node-modules' reports/nodeLinker.txt; then
            echo 'nodeLinker 未配置为 node-modules';
            exit 1;
          fi
          yarn workspaces list --json > reports/workspaces.json
          node scripts/workspace-smoke.cjs
      - name: Smoke test lint-staged
        run: |
          echo "export const __lintStagedSmoke = 1;" > scripts/__lint-staged-smoke__.ts
          git add scripts/__lint-staged-smoke__.ts
          HUSKY=0 npx lint-staged --allow-empty
          git reset scripts/__lint-staged-smoke__.ts
          rm scripts/__lint-staged-smoke__.ts
      - name: Smoke test commitlint
        run: |
          echo "feat(ci): commitlint smoke" | npx commitlint
      - run: yarn lint
      - run: yarn prettier:check
      - run: yarn type-check
      - name: Sync OpenAPI artifacts (spec + types + client)
        run: yarn build:contracts
      - name: Spectral lint
        run: npx @stoplight/spectral-cli lint docs/openapi.json --format sarif -o reports/spectral.sarif
      - name: OpenAPI diff (vs baseline)
        run: |
          if [ -f docs/openapi.baseline.json ]; then
            yarn api:diff | tee reports/openapi-diff.txt
          else
            echo 'No baseline found' | tee reports/openapi-diff.txt
          fi
      - name: Record contracts duration metrics
        if: always()
        run: |
          mkdir -p reports
          END=$(date +%s)
          if [ -z "$CONTRACTS_JOB_START" ]; then
            echo "contracts_duration_seconds=unknown" > reports/contracts-metrics.txt
          else
            DURATION=$((END - CONTRACTS_JOB_START))
            echo "contracts_duration_seconds=$DURATION" > reports/contracts-metrics.txt
          fi
      - name: Upload contract artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contracts
          path: |
            docs/openapi.json
            reports/spectral.sarif
            reports/openapi-diff.txt
            reports/nodeLinker.txt
            reports/workspaces.json
            reports/yarn-install-metrics.txt
            reports/yarn-cache.txt
            reports/contracts-metrics.txt
          description: >-
            合同检查工件：Spectral 报告（API Owner 负责处理规则告警）与 OpenAPI Diff（QA/后端联动评估 breaking 变更），
            同时包含安装指标供平台团队排查缓存与依赖问题。

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v --report-path reports/gitleaks.sarif --format sarif
      - name: OSV scan (lockfile + workspace)
        uses: google/osv-scanner-action@v1
        with:
          scan-args: >-
            --lockfile=./yarn.lock
            --recursive .
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security
          path: reports/

  db-migrate:
    needs: contracts
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cdm
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node & Corepack
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - run: corepack enable
      - run: yarn --version
      - name: Install dependencies (immutable)
        run: yarn install --immutable
      - name: Prepare shadow database
        run: |
          PGPASSWORD=postgres psql -h 127.0.0.1 -U postgres -d postgres -c "DROP DATABASE IF EXISTS cdm_shadow;"
          PGPASSWORD=postgres psql -h 127.0.0.1 -U postgres -d postgres -c "CREATE DATABASE cdm_shadow;"
      - name: Prepare migration reports directory
        run: mkdir -p reports/migrations
      - name: Prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm
          SHADOW_DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm_shadow
        run: yarn prisma:generate
      - name: Apply migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm
          SHADOW_DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm_shadow
        run: |
          yarn workspace @cdm/api prisma migrate deploy 2>&1 | tee reports/migrations/migrate-deploy.log
      - name: Generate rollback script
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm
          SHADOW_DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm_shadow
        run: |
          yarn prisma:rollback > reports/migrations/migrate-rollback.sql
      - name: Run migration verification tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm
          SHADOW_DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/cdm_shadow
        run: yarn test:migrate
      - name: Upload migration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: db-migrate
          path: reports/migrations

  test:
    needs: contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node & Corepack
        id: setup_node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - run: corepack enable
      - run: yarn --version
      - name: Install dependencies (immutable)
        run: |
          mkdir -p reports/coverage/web reports/coverage/api
          yarn install --immutable
      - name: Run client tests (Vitest)
        run: |
          START=$(date +%s)
          yarn test:client
          END=$(date +%s)
          echo "vitest_seconds=$((END-START))" | tee reports/vitest-metrics.txt
      - name: Run server tests (Jest)
        run: |
          START=$(date +%s)
          yarn test:server
          END=$(date +%s)
          echo "jest_seconds=$((END-START))" | tee reports/jest-metrics.txt
      - name: 打印覆盖率摘要
        run: yarn coverage
      - name: Upload coverage (web)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-web
          path: reports/coverage/web
      - name: Upload coverage (api)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-api
          path: reports/coverage/api
      - name: Upload coverage metrics
        uses: actions/upload-artifact@v4
        with:
          name: coverage-metrics
          path: |
            reports/vitest-metrics.txt
            reports/jest-metrics.txt
